#!/usr/bin/env ruby
# encoding: utf-8

# SCRIPT INFO {{{1
# Name:       Telescope - a tool for amateur astronomers
# Language:   Pure Ruby, best viewed in VIM
# Author:     Geir Isene <g@isene.com>
# Web_site:   http://isene.com/
# Github:     https://github.com/isene/telescope
# License:    I release all copyright claims. This code is in the public domain.
#             Permission is granted to use, copy modify, distribute, and sell
#             this software for any purpose. I make no guarantee about the
#             suitability of this software for any purpose and I am not liable
#             for any damages resulting from its use. Further, I am under no
#             obligation to maintain or extend this software. It is provided
#             on an 'as is' basis without any expressed or implied warranty.
# Docs:       Apart from the extensive documentation found on Github, you can
#             get a great understanding of the code itself by simply sending
#             or pasting this whole file into you favorite AI for coding with
#             a prompt like this: "Help me understand every part of this code".

# SETUP {{{1
begin
  require 'rcurses'
  class Object
    include Rcurses
    include Rcurses::Input
  end
rescue StandardError => e
  puts 'Telescope is built using rcurses (https://github.com/isene/rcurses). Install rcurses to run Telescope.'                                          
  exit 1                                                                                                                                       
end                                                                                                                                            
Pane =  Rcurses::Pane
require 'date'
require 'fileutils'
require 'json'
require 'csv'

# Version
VERSION = "1.5"

# Persistence paths
SAVE   = File.join(Dir.home, '.telescope')
CONFIG = File.join(Dir.home, '.telescope_config')

# HELP TEXT {{{1
HELP1 = " WELCOME TO THE TERMINAL TELESCOPE APPLICATION\n".b + '
 This can help structure your telescopes and eyepieces.
 It will calculate properties of your scopes and EPs.
 Scope+EP combination properties are also calculated. 

 Anything you like to have changed or bugs fixed, 
 create an issue: https://github.com/isene/telescope 
 ...or drop me an e-mail: g@isene.com.

 Press any key to show more help text.
'

HELP2 = " TERMININAL TELESCOPE APPLICATION\n\n Keys and their actions\n".b + '
 t           Add telescope (name,app,fl[,notes])
 e           Add eyepiece  (name,fl,afov[,notes])
 ENTER       Edit selected
 TAB         Switch panels
 UP/DOWN     Move cursor
 Shift-UP    Move item up
 Shift-DOWN  Move item down
 HOME/END    Jump to start/end
 o           Toggle order by Telescope APP and Eyepiece FL
 SPACE       Tag/untag
 u           Untag all
 A           Tag all (bulk operation)
 Ctrl-o      Create observation log with tagged equipment
 x           Export tagged items to CSV
 X           Export all items to JSON
 v           Show version information
 D           Delete item
 r           Refresh all panes
 q/Q         Quit (save/no save)
 ?           Help'.fg(230)

HELP3 = " Abbreviations and their meaning\n".b + '
 APP   = Telescope apperature (in millimeters)
 TFL   = Telescope focal length (in millimeters)
 F/?   = Telescope focal ratio
 <MGN  = Magnitude limit (dimmest object visible)
 xEYE  = Times eye light gathering
 MINx  = Minimum magnification
 MAXx  = Maximum magnification
 SEP-R = Rayleigh separation criterion
 SEP-D = Dawes separation limit
 *FLD  = EP for star fields
 GLXY  = EP for galaxies & nebulae
 PLNT  = EP for planets, globular clusters
 DBL*  = EP for double stars & planetary details
 >2*<  = EP for tight double stars
 MOON  = Smallest detail visible on Moon
 SUN   = Smallest detail visible on Sun

 FL    = EP focal length (in millimeters)
 AFOV  = EP apparent field of view
 MAGX  = Magnification (w/selected telescope)
 TFOV  = True field of view (w/selected telescope)
 PPL   = Exit pupil (w/selected telescope)
 2BLW  = With a 2xBarlow (magnification, then rest)'.fg(229)


# CONFIGURATION {{{1
# Default configuration
@config = {
  'colors' => {
    'ts_header_bg' => '00524b',
    'ep_header_bg' => '4c3c1d',
    'tag_color' => 46,
    'cursor_bg' => 234,
    'text_color' => 248,
    'check_good' => 112,
    'check_bad' => 208
  },
  'auto_backup' => true,
  'backup_count' => 5
}

# Load configuration if it exists
if File.exist?(CONFIG)
  begin
    loaded_config = eval(File.read(CONFIG))
    @config.merge!(loaded_config) if loaded_config.is_a?(Hash)
  rescue
    # Use defaults if config file is corrupted
  end
end

# INITIALIZATION {{{1
# Data stores
@ts        = []  # Telescopes: [name, app, fl, notes]
@ep        = []  # Eyepieces:  [name, fl, afov, notes]
@tstag     = []  # Telescope tags
@eptag     = []  # Eyepiece tags
@cursor_ts = 0   # Telescope cursor index
@cursor_ep = 0   # Eyepiece cursor index

# BACKUP SYSTEM {{{1
def create_backup
  return unless @config['auto_backup'] && File.exist?(SAVE)
  
  backup_dir = File.join(Dir.home, '.telescope_backups')
  Dir.mkdir(backup_dir) unless Dir.exist?(backup_dir)
  
  timestamp = Time.now.strftime('%Y%m%d_%H%M%S')
  backup_file = File.join(backup_dir, ".telescope_#{timestamp}")
  
  FileUtils.cp(SAVE, backup_file)
  
  # Clean old backups
  backups = Dir.glob(File.join(backup_dir, '.telescope_*')).sort
  while backups.size > @config['backup_count']
    File.delete(backups.shift)
  end
end

# Load saved data if present
SAVE = File.join(Dir.home, '.telescope') # Persistence path

if File.exist?(SAVE)
  create_backup
  load SAVE   # expects plaintext: @ts = [...] and @ep = [...]
  # Convert old format to new format with notes
  @ts.map! { |t| t.size == 3 ? t + [''] : t }
  @ep.map! { |e| e.size == 3 ? e + [''] : e }
else
  @ts = []
  @ep = []
end

@ts_unsorted = @ts.dup
@ep_unsorted = @ep.dup

# Initialize tag arrays to match loaded data
@tstag = Array.new(@ts.size, false)
@eptag = Array.new(@ep.size, false)

# CLASS EXTENSIONS {{{1
# Numeric formatting helper
class Numeric
	def deg; self * Math::PI / 180; end
	def rad; self * 180 / Math::PI; end
  def rts(n); format("%.#{n}f", self) end
end

# Pane class extension
module Rcurses
  class Pane
    attr_accessor :index
  end
end

# OPTICAL FORMULAS {{{1
def tfr(app, tfl);         (tfl.to_f / app);                           end
def mlim(app);             (5 * Math::log(app / 10, 10) + 7.5);        end
def xeye(app);             (app.to_f ** 2 / 49);                       end
def minx(app, tfl);        (tfl / (7 * tfr(app, tfl)));                end
def mine(app, tfl);        (7 * tfr(app, tfl));                        end
def maxx(app);             (2 * app.to_f);                             end
def maxe(app, tfl);        (tfl / maxx(app));                          end
def sepr(app);             (3600.0 * Math::asin(671E-6 / app).rad);    end
def sepd(app);             (115.824 / app);                            end
def e_st(app, tfl);        (6.4 * tfl / app);                          end
def e_gx(app, tfl);        (3.6 * tfl / app);                          end
def e_pl(app, tfl);        (2.1 * tfl / app);                          end
def e_2s(app, tfl);        (1.3 * tfl / app);                          end
def e_t2(app, tfl);        (0.7 * tfl / app);                          end
def moon(tfl);             (384E6*Math::tan((115.824.deg / tfl)/360)); end
def sun(tfl);              (moon(tfl) / 2.5668);                       end
def tfov(tfl, epfl, afov); (afov.to_f / magx(tfl, epfl));              end
def pupl(app, tfl, epfl);  (app.to_f / magx(tfl, epfl));               end
def magx(tfl, epfl);       (tfl.to_f / epfl);                          end

# VALIDATION FUNCTIONS {{{1
def validate_telescope_input(input_array)
  return false unless input_array.size >= 3
  
  name, app, fl = input_array[0..2]
  return false if name.nil? || name.strip.empty?
  return false unless app.to_f > 0
  return false unless fl.to_f > 0
  
  true
end

def validate_eyepiece_input(input_array)
  return false unless input_array.size >= 3
  
  name, fl, afov = input_array[0..2]
  return false if name.nil? || name.strip.empty?
  return false unless fl.to_f > 0
  return false unless afov.to_f > 0 && afov.to_f <= 180
  
  true
end

def safe_file_write(file, content)
  begin
    File.write(file, content)
    true
  rescue => e
    @pST.say(" Error writing file: #{e.message} - Press any key")
    getchr
    false
  end
end

# FUNCTIONS {{{1
def refresh_all #{{{2
  Rcurses.clear_screen
  @pTS.border   = false
  @pEP.border   = false
  @focus.border = true
  @pTS.full_refresh
  @pTSh.full_refresh
  @pEP.full_refresh
  @pEPh.full_refresh
  @pST.refresh
end

def render_ts #{{{2
  @pTS.clear
  @ts.each_with_index do |t, i|
    @pTS.text += "\n"
    name   = t[0]
    app    = t[1].to_i
    tfl    = t[2].to_i
    tag_ts = @tstag[i] ? ' ' + '▐'.b.fg(@config['colors']['tag_color']) : '  '
    txt    = tag_ts
    txt   += name.to_s.ljust(18)
    txt   += app.to_s.rjust(7)
    txt   += tfl.to_s.rjust(8)
    txt   += tfr(app, tfl).rts(1).rjust(6)
    txt   += mlim(app).rts(1).rjust(6)
    txt   += xeye(app).rts(0).rjust(6)
    min    = mine(app, tfl).rts(0)
    min   += "(" + minx(app, tfl).rts(0) + "x)"
    txt   += min.rjust(10)
    max    = maxe(app, tfl).rts(0)
    max   += "(" + maxx(app).rts(0) + "x)"
    txt   += max.rjust(9)
    txt   += sepr(app).rts(2).rjust(7) + '"'
    txt   += sepd(app).rts(2).rjust(6) + '"'
    txt   += e_st(app, tfl).rts(0).rjust(7)
    txt   += e_gx(app, tfl).rts(0).rjust(6)
    txt   += e_pl(app, tfl).rts(0).rjust(6)
    txt   += e_2s(app, tfl).rts(0).rjust(6)
    txt   += e_t2(app, tfl).rts(0).rjust(6)
    txt   += moon(tfl).rts(0).rjust(7)
    txt   += sun(tfl).rts(0).rjust(6)
    txt[0] = '→' if i == @pTS.index
    # ANSI safe padding
    pad = @pTS.w - Rcurses.display_width(txt.pure)
    pad = 0 if pad.negative?
    txt += ' ' * pad
    txt = txt.bg(@config['colors']['cursor_bg']) if i == @pTS.index
    txt = txt.fg(@config['colors']['text_color']) if i != @pTS.index
    @pTS.text += txt
  end
  @pTS.refresh
  @pTSh.full_refresh
end

def ep_nice(app, tfl, e) #{{{2
  r    = (tfl / app)
  out  = ''
  # Enhanced color coding with background highlights for optimal ranges - aligned with header
  # Header: "    *FLD  GLXY  PLNT  DBL*  >2*< "
  # Positions:   6    12   18   24   30
  
  out += '     '  # 5 spaces to center under *FLD (position 6)
  
  if e/6 > r
    out += ' ✓ '.fg(@config['colors']['check_good']).bg(22)  # Dark green bg for star fields
  else
    out += ' ✗ '.fg(@config['colors']['check_bad'])
  end
  
  out += '   '  # 3 spaces to center under GLXY (position 12)
  
  if e/3 > r && e/6 <= r
    out += ' ✓ '.fg(@config['colors']['check_good']).bg(17)  # Dark blue bg for galaxies
  else
    out += ' ✗ '.fg(@config['colors']['check_bad'])
  end
  
  out += '   '  # 3 spaces to center under PLNT (position 18)
  
  if e/1.5 > r && e/3 <= r
    out += ' ✓ '.fg(@config['colors']['check_good']).bg(52)  # Dark magenta bg for planets
  else
    out += ' ✗ '.fg(@config['colors']['check_bad'])
  end
  
  out += '   '  # 3 spaces to center under DBL* (position 24)
  
  if e >= r && e/1.5 <= r
    out += ' ✓ '.fg(@config['colors']['check_good']).bg(94)  # Orange bg for double stars
  else
    out += ' ✗ '.fg(@config['colors']['check_bad'])
  end
  
  out += '   '  # 3 spaces to center under >2*< (position 30)
  
  if e < r
    out += ' ✓ '.fg(@config['colors']['check_good']).bg(88)  # Dark red bg for tight doubles
  else
    out += ' ✗ '.fg(@config['colors']['check_bad'])
  end
  
  out
end

def render_ep #{{{2
  app = @ts[@pTS.index][1].to_f
  tfl = @ts[@pTS.index][2].to_f
  @pEP.text = "\n"
  @ep.each_with_index do |e, i|
    name   = e[0]
    epfl   = e[1].to_f
    afov   = e[2].to_f
    tag_ep = @eptag[i] ? ' ' + '▐'.b.fg(@config['colors']['tag_color']) : '  '
    txt    = tag_ep
    txt   += name.to_s.ljust(18)
    txt   += epfl.to_s.rjust(7)
    txt   += afov.to_s.rjust(8)
    txt   += magx(tfl, epfl).rts(0).rjust(8) + 'x'
    fov = tfov(tfl, epfl, afov)
    deg  = fov.to_i
    min  = ((fov - deg) * 60).to_i
    sec  = ((fov - deg - min/60.0) * 3600).to_i
    min_s = format('%02d', min)
    sec_s = format('%02d', sec)
    dms = "#{deg}°#{min_s}'#{sec_s}\""
    txt += dms.rjust(11)
    txt   += pupl(app, tfl, epfl).rts(1).rjust(6)
    txt   += (magx(tfl, epfl) * 2).rts(0).rjust(8) + 'x'
    tfov2 = tfov(tfl, epfl, afov) / 2.0
    deg2  = tfov2.to_i
    min2  = ((tfov2 - deg2) * 60).to_i
    sec2  = ((tfov2 - deg2 - min2/60.0) * 3600).to_i
    min2_s = format('%02d', min2)
    sec2_s = format('%02d', sec2)
    dms2 = "#{deg2}°#{min2_s}'#{sec2_s}\""
    txt += dms2.rjust(11)
    txt   += (pupl(app, tfl, epfl) / 2).rts(1).rjust(6)
    txt    = txt.fg(@config['colors']['text_color']) if i != @pEP.index
    txt   += ep_nice(app, tfl, epfl)
    txt[0] = '→' if i == @pEP.index
    # ANSI safe padding
    pad = @pEP.w - Rcurses.display_width(txt.pure)
    pad = 0 if pad.negative?
    txt += ' ' * pad
    txt = txt.bg(@config['colors']['cursor_bg']) if i == @pEP.index
    @pEP.text += txt
  end
  @pEP.refresh
  @pEPh.full_refresh
end

def observe #{{{2
  # Prepare file header
  date = Date.today.iso8601
  file = File.join(Dir.home, "#{date}_observation.txt")

  obs  = +"Observation file: #{file}\n"
  obs << "Observation date: #{date}\n\n"
  obs << "This file lists the intended equipment for the observation date.\n"
  obs << "Reference observations with telescope letter and eyepiece numbers (like A2, B1, etc.)\n\n"
  obs << ("─" * 100) << "\n"

  enum = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

  # Collect and print selected telescopes
  sel_ts = @tstag.each_index.select { |i| @tstag[i] }
  if sel_ts.empty?
    obs << "No telescope(s) chosen for the observation\n"
  else
    sel_ts.each_with_index do |ts_idx, idx|
      name, app_str, tfl_str = @ts[ts_idx]
      app, tfl = app_str.to_f, tfl_str.to_f

      obs << format(
        "Telescope (%s): %-15s (%3.0fmm/%4.0fmm f/%.1f)",
         enum[idx], name, app, tfl, tfr(app, tfl)
      )
      obs << format("  Max MAG: %.1f",   mlim(app))
      obs << format("  Min SEP: %.2f/%.2f\n", sepd(app), sepr(app))
    end
  end

  obs << ("─" * 100) << "\n"

  # Collect and print selected eyepieces (with per‐telescope TFOV)
  sel_ep = @eptag.each_index.select { |i| @eptag[i] }
  if sel_ep.empty?
    obs << "No eyepiece(s) chosen for the observation\n"
  else
    sel_ep.each_with_index do |ep_idx, ep_num|
      name, epfl_str, afov_str = @ep[ep_idx]
      epfl, afov = epfl_str.to_f, afov_str.to_f

      obs << format(
        "Eyepiece  (%d): %-15s (%4.0fmm/%3.0f°)  ",
         ep_num+1, name, epfl, afov
      )

      sel_ts.each_with_index do |ts_idx, ts_num|
        app, tfl = @ts[ts_idx][1].to_f, @ts[ts_idx][2].to_f
        mag       = magx(tfl, epfl)
        tf        = tfov(tfl, epfl, afov)

        # Break TFOV into deg, min, sec
        deg  = tf.to_i
        min  = ((tf - deg)*60).to_i
        sec  = ((tf - deg - min/60.0)*3600).to_i
        angle = format(
          "%2s%2d'%2d\"",
          (deg.zero? ? "  " : "#{deg}°"),
          min, sec
        )
        obs << format(
          "%s:%5.1fx (%s)  ",
          enum[ts_num], mag, angle
        )
      end

      obs << "\n"
    end
  end

  obs << ("─" * 100) << "\n\n"
  obs << ("Object:              Equipment:               Observation:\n" * 8)
  @pObs.clear
  @pObs.say(obs)
  @pST.say(" Press any key to continue")
  File.write(file, obs)
  getchr
end

def export_csv #{{{2
  date = Date.today.iso8601
  file = File.join(Dir.home, "telescope_export_#{date}.csv")
  
  CSV.open(file, 'w') do |csv|
    # Export tagged telescopes
    csv << ['TYPE', 'NAME', 'PARAM1', 'PARAM2', 'PARAM3', 'NOTES']
    sel_ts = @tstag.each_index.select { |i| @tstag[i] }
    sel_ts.each do |ts_idx|
      t = @ts[ts_idx]
      csv << ['TELESCOPE', t[0], t[1], t[2], '', t[3] || '']
    end
    
    # Export tagged eyepieces
    sel_ep = @eptag.each_index.select { |i| @eptag[i] }
    sel_ep.each do |ep_idx|
      e = @ep[ep_idx]
      csv << ['EYEPIECE', e[0], e[1], e[2], '', e[3] || '']
    end
  end
  
  @pST.say(" Exported tagged items to #{file} - Press any key")
  getchr
end

def export_json #{{{2
  date = Date.today.iso8601
  file = File.join(Dir.home, "telescope_export_#{date}.json")
  
  data = {
    'export_date' => date,
    'telescopes' => @ts.map { |t| { 'name' => t[0], 'aperture' => t[1], 'focal_length' => t[2], 'notes' => t[3] || '' } },
    'eyepieces' => @ep.map { |e| { 'name' => e[0], 'focal_length' => e[1], 'afov' => e[2], 'notes' => e[3] || '' } }
  }
  
  File.write(file, JSON.pretty_generate(data))
  @pST.say(" Exported all items to #{file} - Press any key")
  getchr
end

def show_version #{{{2
  local_version = VERSION
  
  begin
    remote_version = Gem.latest_version_for('telescope-term').version
    version_info = +" VERSION INFORMATION\n\n"
    version_info << "Local version: #{local_version}\n"
    version_info << "Latest RubyGems version: #{remote_version}\n\n"
    
    if Gem::Version.new(remote_version) > Gem::Version.new(local_version)
      version_info << "Update available! Run: gem update telescope-term".fg(@config['colors']['check_bad'])
    else
      version_info << "You have the latest version!".fg(@config['colors']['check_good'])
    end
    
    version_info << "\n\nGem info: https://rubygems.org/gems/telescope-term"
    version_info << "\nSource code: https://github.com/isene/telescope"
  rescue StandardError => e
    version_info = +" VERSION INFORMATION\n\n"
    version_info << "Local version: #{local_version}\n"
    version_info << "Could not check latest version: #{e.message}".fg(@config['colors']['check_bad'])
    version_info << "\n\nGem info: https://rubygems.org/gems/telescope-term"
    version_info << "\nSource code: https://github.com/isene/telescope"
  end
  
  @pObs.clear
  @pObs.full_refresh
  @pObs.say(version_info)
  @pST.say(" Press any key to continue")
  getchr
  refresh_all
end


# PANE SETUP {{{1
# Top telescopes, eyepieces below, status at bottom
@max_h, @max_w = IO.console.winsize
@pTS  = Pane.new( 2,      2,   @max_w - 2,           8, nil, nil)
@pTSh = Pane.new( 2,      2,   @max_w - 2,           1, 255, @config['colors']['ts_header_bg'])
@pTSa = Pane.new( 1, @max_h,       @max_w,           1, 255, @config['colors']['ts_header_bg'])
@pEP  = Pane.new( 2,     11,   @max_w - 2, @max_h - 12, nil, nil)
@pEPh = Pane.new( 2,     11,   @max_w - 2,           1, 255, @config['colors']['ep_header_bg'])
@pEPa = Pane.new( 1, @max_h,       @max_w,           1, 255, @config['colors']['ep_header_bg'])
@pST  = Pane.new( 1, @max_h,       @max_w,           1, 255, 236)

@pHlp = Pane.new( @max_w/2 - 30, @max_h/2 - 13, 60, 26, 252, 233)
@pObs = Pane.new( 8, 8, @max_w - 16, @max_h - 16, 231, 233)

@pTSh.text   = ' TELESCOPES          APP(mm)  FL(mm)  F/?  <MGN  xEYE     MINx     MAXx    SEP-R  SEP-D   *FLD  GLXY  PLNT  DBL*  >2*<   MOON   SUN'.b
@pEPh.text   = ' EYEPIECES            FL(mm)   AFOV'.b 
@pEPh.text  += '     MAGX      TFOV   PPL      2blw      tfov    ppl'.b.i.fg("00827b")
@pEPh.text  += '    *FLD  GLXY  PLNT  DBL*  >2*<'.bg(@config['colors']['ep_header_bg'])
@pST.text    = ' t/e = Add telescope/eyepiece, ENTER = Edit item, q/Q = Quit, ? = Help'
@pHlp.border = true
@pObs.border = true

@pTSa.record = true
@pEPa.record = true
@pTS.index   = 0
@pEP.index   = 0
@sort_ts     = false
@sort_ep     = false
@ts_unsorted = @ts.dup
@ep_unsorted = @ep.dup
@focus       = @pTS
@current     = @ts
@comparison_mode = false

# TRAP WIN SIZE CHANGE {{{1
Signal.trap('WINCH') do
  @h, @w = IO.console.winsize
  refresh_all
end

# MAIN LOOP {{{1
refresh_all
loop do
  render_ts
  render_ep
  @pST.text = ' t/e = Add telescope/eyepiece, ENTER = Edit item, q/Q = Quit, ? = Help'
  @pST.full_refresh
  ch = getchr
  case ch
  when 'q'
    safe_file_write(SAVE, "@ts = #{@ts.inspect}\n@ep = #{@ep.inspect}\n") && exit
  when 'Q'; exit
  when '?'
    @pHlp.full_refresh
    @pHlp.say(HELP1)
    getchr
    @pHlp.say(HELP2)
    getchr
    @pHlp.say(HELP3)
    getchr
    refresh_all
  when 'r'
    refresh_all
  when 't'
    inp=@pTSa.ask('name, app, fl [, notes]: ','').split(', ')
    unless validate_telescope_input(inp)
      @pST.say(" Invalid input - Press any key")
      getchr
      next
    end
    inp << '' if inp.size == 3  # Add empty notes if not provided
    @ts<<inp
    @tstag<<false
    @ts_unsorted << inp # keep master list updated
    @current = @ts
  when 'e'
    inp=@pEPa.ask('name, fl, afov [, notes]: ','').split(', ')
    unless validate_eyepiece_input(inp)
      @pST.say(" Invalid input - Press any key")
      getchr
      next
    end
    inp << '' if inp.size == 3  # Add empty notes if not provided
    @ep<<inp
    @eptag<<false
    @ep_unsorted << inp # keep master list updated
    @current = @ep
  when 'ENTER'
    val = @current[@focus.index].join(', ')
    arr=@pST.ask('Edit: ', val).split(', ')
    is_valid = @current.equal?(@ts) ? validate_telescope_input(arr) : validate_eyepiece_input(arr)
    unless is_valid
      @pST.say(" Invalid input - Press any key")
      getchr
      next
    end
    arr << '' if arr.size == 3  # Add empty notes if not provided
    @current[@focus.index] = arr
  when 'D'
    if @current.equal?(@ts)
      removed = @ts.delete_at(@focus.index)
      @ts_unsorted.delete(removed)
      @tstag.delete_at(@focus.index)
    else
      removed = @ep.delete_at(@focus.index)
      @ep_unsorted.delete(removed)
      @eptag.delete_at(@focus.index)
    end
  when 'TAB'
    @focus   = (@focus == @pTS ? @pEP : @pTS)
    @current = (@current == @ts ? @ep : @ts)
    @pTS.border   = false
    @pEP.border   = false
    @focus.border = true
    @pTS.border_refresh
    @pEP.border_refresh
  when 'UP'
    @focus.index -= 1
    @focus.index  = @current.length - 1 if @focus.index < 0
  when 'DOWN'
    @focus.index += 1
    @focus.index  = 0 if @focus.index > @current.length - 1
    @focus == :ts ? @cursor_ts = 0 : @cursor_ep = 0
  when 'HOME'
    @focus.index  = 0
  when 'END'
    @focus.index  = @current.length - 1
  when 'S-UP'
    @current.insert([@focus.index - 1, 0].max, @current.delete_at(@focus.index))
    @focus.index -= 1 if @focus.index != 0
  when 'S-DOWN'
    @current.insert([@focus.index + 1, @current.size - 1].min, @current.delete_at(@focus.index))
    @focus.index += 1 if @focus.index != @current.size - 1
  when 'o' # Toggle-sort the currently focused list
    if @current.equal?(@ts) # toggling telescopes
      @sort_ts = !@sort_ts
      @ts = if @sort_ts
              @ts_unsorted.sort_by { |t| t[1].to_i }
            else
              @ts_unsorted.dup
            end
      @current    = @ts
      @pTS.index  = [@pTS.index, @ts.size - 1].min
    else # toggling eyepieces
      @sort_ep = !@sort_ep
      @ep = if @sort_ep
              @ep_unsorted.sort_by { |e| e[1].to_i }
            else
              @ep_unsorted.dup
            end
      @current    = @ep
      @pEP.index  = [@pEP.index, @ep.size - 1].min
    end
  when ' '   # SPACE: tag/untag current entry
    if @current.equal?(@ts)
      idx = @pTS.index
      @tstag[idx] = !@tstag[idx]
    else
      idx = @pEP.index
      @eptag[idx] = !@eptag[idx]
    end
  when 'u'
    @tstag.fill(false)
    @eptag.fill(false)
  when 'A'
    if @current.equal?(@ts)
      @tstag.fill(true)
    else
      @eptag.fill(true)
    end
  when 'x'
    export_csv
  when 'X'
    export_json
  when 'v'
    show_version
  when 'C-O'
    observe
  end
end

# vim: set sw=2 sts=2 et filetype=ruby fdm=marker fdn=2 fcs=fold\:\ :
